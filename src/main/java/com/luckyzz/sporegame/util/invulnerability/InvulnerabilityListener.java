package com.luckyzz.sporegame.util.invulnerability;

import com.akamecoder.cristalix.event.PlayerQuitServerEvent;
import com.akamecoder.cristalix.event.handle.EventHandle;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.NotNull;

import java.util.concurrent.TimeUnit;

class InvulnerabilityListener extends EventHandle {

    private final InvulnerabilityService service;

    private final Cache<Player, Invulnerability> moveCache;

    InvulnerabilityListener(@NotNull final Plugin plugin, @NotNull final InvulnerabilityService service) {
        super(plugin);
        this.service = service;

        moveCache = CacheBuilder.newBuilder()
                .expireAfterAccess(1, TimeUnit.SECONDS)
                .expireAfterWrite(1, TimeUnit.SECONDS)
                .build();
    }

    @EventHandler
    public void onJoin(@NotNull final PlayerJoinEvent event) {
        final Player player = event.getPlayer();
        service.getInvulnerability(player).ifPresent(Invulnerability::apply);
    }

    @EventHandler
    public void onMove(@NotNull final PlayerMoveEvent event) {
        final Player player = event.getPlayer();
        final Invulnerability invulnerability = moveCache.getIfPresent(player);
        if(invulnerability == null) {
            service.getInvulnerability(event.getPlayer()).ifPresent(invulnerability1 -> {
                moveCache.put(player, invulnerability1);
                if(invulnerability1.checkOption(InvulnerabilityOption.MOVE)) {
                    event.setCancelled(true);
                }
            });
            return;
        }

        if(invulnerability.checkOption(InvulnerabilityOption.MOVE)) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onDamage(@NotNull final EntityDamageEvent event) {
        final Entity entity = event.getEntity();
        if(!(entity instanceof Player)) {
            return;
        }
        final Player player = (Player) entity;
        service.getInvulnerability(player).ifPresent(invulnerability -> {
            if(invulnerability.checkOption(InvulnerabilityOption.BE_DAMAGED)) {
                event.setCancelled(true);
            }
        });
    }

    @EventHandler
    public void onDamage(@NotNull final EntityDamageByEntityEvent event) {
        final Entity entity = event.getDamager();
        if(!(entity instanceof Player)) {
            return;
        }
        final Player player = (Player) entity;
        service.getInvulnerability(player).ifPresent(invulnerability -> {
            if(invulnerability.checkOption(InvulnerabilityOption.DAMAGE_ANOTHER)) {
                event.setCancelled(true);
            }
        });
    }

    @EventHandler
    public void onQuit(@NotNull final PlayerQuitServerEvent event) {
        service.getInvulnerability(event.getPlayer()).ifPresent(Invulnerability::unapply);
    }

}
