package com.luckyzz.sporegame.util.invulnerability;

import com.akamecoder.cristalix.scheduler.Scheduler;
import com.akamecoder.cristalix.scheduler.SchedulerTicks;
import com.akamecoder.cristalix.util.AkameOptional;
import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.NotNull;

import java.util.concurrent.TimeUnit;

public class TimedInvulnerabilityService implements InvulnerabilityService {

    private final Plugin plugin;
    private final InvulnerabilityStorage storage = new InvulnerabilityStorage();
    private CheckingScheduler scheduler;

    public TimedInvulnerabilityService(@NotNull final Plugin plugin) {
        this.plugin = plugin;

        new InvulnerabilityListener(plugin, this);
    }

    private class CheckingScheduler extends Scheduler {

        private CheckingScheduler() {
            super(TimedInvulnerabilityService.this.plugin);
            this.runTaskTimer(SchedulerTicks.toTicks(1, TimeUnit.SECONDS));
        }

        @Override
        public void run() {
            storage.removeIf(invulnerability -> !invulnerability.doTimeChecking());

            if(storage.isEmpty()) {
                cancel();
                scheduler = null;
            }
        }

    }

    @Override
    public @NotNull Invulnerability createInvulnerability(final long timeLeft, @NotNull final String name) {
        final Invulnerability invulnerability = new TimedInvulnerability(plugin, timeLeft, name);
        storage.add(invulnerability);

        if(scheduler == null || !scheduler.isCancelled()) {
            scheduler = new CheckingScheduler();
        }

        return invulnerability;
    }

    @Override
    public @NotNull AkameOptional<Invulnerability> getInvulnerability(@NotNull final String name) {
        return AkameOptional.ofOptional(storage.stream()
                .filter(invulnerability -> invulnerability.getName().equals(name))
                .findFirst());
    }

    @Override
    public @NotNull AkameOptional<Invulnerability> removeInvulnerability(@NotNull final String name) {
        return getInvulnerability(name).ifPresent(this::removeInvulnerability);
    }

    @Override
    public void removeInvulnerability(@NotNull final Invulnerability invulnerability) {
        invulnerability.cancel();
        storage.remove(invulnerability);
    }

    @Override
    public void cancel() {
        if(scheduler != null && !scheduler.isCancelled()) {
            scheduler.cancel();
        }
    }

}
