package com.luckyzz.sporegame.util.invulnerability;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffectType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

class TimedInvulnerability implements Invulnerability {

    private final Plugin plugin;
    private final String name;
    private Consumer<Player> userConsumer;
    private long timeLeft;

    private final List<InvulnerabilityOption> options;

    TimedInvulnerability(@NotNull final Plugin plugin, final long timeLeft, @NotNull final String name) {
        this.plugin = plugin;
        this.timeLeft = timeLeft;
        this.name = name;
        this.options = new ArrayList<>();
    }

    @Override
    public long getTimeLeft() {
        return timeLeft;
    }

    @Override
    public boolean doTimeChecking() {
        if(--timeLeft > 0) {
            return true;
        }
        cancel();
        return false;
    }

    @Override
    public @NotNull String getName() {
        return name;
    }

    @Override
    public boolean checkOption(@NotNull final InvulnerabilityOption option) {
        return options.contains(option);
    }

    @Override
    public @NotNull Invulnerability expire(@NotNull final Consumer<Player> userConsumer) {
        this.userConsumer = userConsumer;
        return this;
    }

    @Override
    public @NotNull Invulnerability option(@NotNull final InvulnerabilityOption option) {
        options.add(option);

        if(checkOption(InvulnerabilityOption.INVISIBLE)) {
            getPlayerOptional().ifPresent(player -> player.addPotionEffect(PotionEffectType.INVISIBILITY.createEffect((int) timeLeft * 20, 0)));
        }

        return this;
    }

    @Override
    public void cancel() {
        if(checkOption(InvulnerabilityOption.INVISIBLE)) {
            getPlayerOptional().ifPresent(player -> player.removePotionEffect(PotionEffectType.INVISIBILITY));
        }

        if(userConsumer != null) {
            getPlayerOptional().ifPresent(player -> userConsumer.accept(player));
        }
    }

    @Override
    public void apply() {
        getPlayerOptional().ifPresent(player -> {
            if(checkOption(InvulnerabilityOption.INVISIBLE)) {
                player.addPotionEffect(PotionEffectType.INVISIBILITY.createEffect((int) timeLeft * 20, 0));
            }
        });
    }

    @Override
    public void unapply() {
        getPlayerOptional().ifPresent(player -> {
            if(checkOption(InvulnerabilityOption.INVISIBLE)) {
                player.removePotionEffect(PotionEffectType.INVISIBILITY);
            }
        });
    }

    @Override
    public boolean equals(@Nullable final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final TimedInvulnerability that = (TimedInvulnerability) o;
        return new EqualsBuilder()
                .append(plugin, that.plugin)
                .append(timeLeft, that.timeLeft)
                .append(name, that.name)
                .append(userConsumer, that.userConsumer)
                .append(options, that.options)
                .isEquals();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 37)
                .append(plugin)
                .append(timeLeft)
                .append(name)
                .append(userConsumer)
                .append(options)
                .toHashCode();
    }
}
